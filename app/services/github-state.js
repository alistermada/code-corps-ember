import Ember from 'ember';

const { get, Service, inject: { service } } = Ember;

function dec2hex(dec) {
  return (`0${dec.toString(16)}`.substr(-2));
}

function generateRandomString(len) {
  let arr = new window.Uint8Array((len || 40) / 2);
  window.crypto.getRandomValues(arr);
  return Array.from(arr).map(dec2hex).join('');
}

/**
 * Service used to protect against cross site request forgery during the github
 * connect process. The two methods, `generate()` and `validate(state)` are
 * served to initialy generate and then later validate a `state` string used
 * in the process.
 *
 * @class GithubStateService
 * @module code-corps-ember/services/github-state
 * @extends Ember.Service
 * @uses SessionService
 * @public
 */
export default Service.extend({
  /**
   * We use the injected session service to store the `state` in a way that
   * persists across tabs
   *
   * @property session
   * @type Ember.Service
   * @private
   */
  session: service(),

  /**
   * Generates and returns a random string. The string is also stored into the
   * user's session.
   *
   * This string can then be used as a `state` variable when navigating to
   * github's connect URL. Github will then return it upon succesful approval,
   * so it can be validated using the sibling `validate(state)` function.
   *
   * @method generate
   * @return {String} A randomly generated string. The string is also stored in the user's session.
   * @public
   */
  generate() {
    let githubState = generateRandomString();
    // session service overrides `set`, so we need to use it directly
    get(this, 'session').set('data.githubState', githubState);
    return githubState;
  },

  /**
   * Validates a state string.
   *
   * The string will be compared against another string, generated by the
   * sibling `generate()` function and stored into the current user's session,
   * to determine if it's valid or not.
   *
   * @method validate
   * @param {String} stateToCheck The string to check if valid
   * @return {Boolean} True if the provided string is also the one stored in the user's session, false otherwise.
   * @public
   */
  validate(stateToCheck) {
    let state = get(this, 'session.data.githubState');
    return state && state === stateToCheck;
  }
});
